Include(_("test_base.script"));

class sdkTest extends script_test_base
{
    function Run()
    {
        clear_global_test_results()
        ::print("======= Test SDK function BEGINN ======= \n");
        test_replace_macros();
        ::print("======= Test SDK function END ======= \n");
        print_global_test_result();
    }
    
    function test_replace_macros()
    {
        ::print("======= Test ReplaceMacros function BEGINN ======= \n");
        clear_test_result();
        test_string("no replacing", ReplaceMacros(_("test")), "test");
        print(_("Open an editor to test"));
        local testEditor = GetEditorManager().New(_("test.ext"));
        testEditor.SetText(_("Line1\nLine2\nLine3"));
        test_string("active line", ReplaceMacros(_("$(ACTIVE_EDITOR_LINE)")),_("1"));
        test_string("editor name", ReplaceMacros(_("$(ACTIVE_EDITOR_STEM)")),_("test"));
        test_string("editor name extension", ReplaceMacros(_("$(ACTIVE_EDITOR_EXT)")),_("ext"));
        
        test_string("if true", ReplaceMacros(_("$if(true){true}{false}")),_("true"));
        test_string("if 1", ReplaceMacros(_("$if(1){true}{false}")),_("true"));
        test_string("if 1==1", ReplaceMacros(_("$if(1==1){true}{false}")),_("true"));
        test_string("if false", ReplaceMacros(_("$if(false){true}{false}")),_("false"));
        test_string("if 0", ReplaceMacros(_("$if(0){true}{false}")),_("false"));
        test_string("if 1==0", ReplaceMacros(_("$if(1==0){true}{false}")),_("false"));
        
        test_string("if test==test", ReplaceMacros(_("$if(test==test){true}{false}")),_("true"));
        test_string("if tes<test", ReplaceMacros(_("$if(tes<test){true}{false}")),_("true"));
        test_string("if 1>0", ReplaceMacros(_("$if(1>0){true}{false}")),_("true"));
        test_string("if 1<0", ReplaceMacros(_("$if(1<0){true}{false}")),_("false"));
        
        test_string("if [[print(_(\"true\"))]]", ReplaceMacros(_("$if([[print(_(\"true\"))]]){true}{false}")),_("true"));
        test_string("if [[print(_(\"false\"))]]", ReplaceMacros(_("$if([[print(_(\"false\"))]]){true}{false}")),_("false"));
        test_string("if [[print(_(\"FALSE\"))]]", ReplaceMacros(_("$if([[print(_(\"FALSE\"))]]){true}{false}")),_("false"));
        test_string("if [[print(_(\"0\"))]]", ReplaceMacros(_("$if([[print(_(\"0\"))]]){true}{false}")),_("false"));
        
        test_string("if [[print(_(\"1==0\"))]]", ReplaceMacros(_("$if([[print(_(\"1==0\"))]]){true}{false}")),_("false"));
        test_string("if [[print(_(\"1==1\"))]]", ReplaceMacros(_("$if([[print(_(\"1==1\"))]]){true}{false}")),_("true"));
        local testStr = " PS1=\"\\(awk '/MemFree/{print \\\" \\2}' \\\" /proc/meminfo) prompt > \"";
        print(_("bash escape string: \"" + testStr + "\""));
        test_string("bash escaping 1.1", ReplaceMacros(_("$if(true){" + testStr + "}{false}")),_(testStr));
        test_string("bash escaping 1.2", ReplaceMacros(_("$if(false){" + testStr + "}{false}")),_("false"));
        testStr = " echo \"I'd say: \\\"Go for it!\\\"\"\"";
        print(_("bash escape string: \"" + testStr + "\""));
        test_string("bash escaping 2.1", ReplaceMacros(_("$if(true){" + testStr + "}{false}")),_(testStr));
        test_string("bash escaping 2.2", ReplaceMacros(_("$if(false){" + testStr + "}{false}")),_("false"));
       

        
        print(_("Close the editor "));
        testEditor.Close();
        print_test_result();
        ::print("======= Test ReplaceMacros function END ======= \n");
    }
}
